import telebot
import json
import os
import requests
from telebot import types
from geopy.geocoders import Nominatim
from geopy.exc import GeopyError

API_2GIS_KEY = '' # —Ç–æ–∫–µ–Ω 2Gis
API_TELEGRAM_TOKEN = '' # —Ç–æ–∫–µ–Ω –æ—Ç BotFather

bot = telebot.TeleBot(API_TELEGRAM_TOKEN)

places_data_json = 'places_data.json'
database_json = 'user_requests.json'
channel_username = '@news_murziki'
users_json = 'users.json'

mcat = ["–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", "–ö–∞—Ñ–µ", "–§–∞—Å—Ç—Ñ—É–¥", "–°—Ç–æ–ª–æ–≤—ã–µ", "–ü–µ–∫–∞—Ä–Ω–∏", "–ú–∞–≥–∞–∑–∏–Ω—ã", "–¢–µ—Ö–Ω–æ–ø–∞—Ä–∫–∏", "–°—Ç–∞—Ä—Ç–∞–ø—ã", "–ì–∞–¥–∂–µ—Ç—ã", "–ú–∞–≥–∞–∑–∏–Ω—ã —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏", "–ò–≥—Ä–æ–≤—ã–µ –∫–ª—É–±—ã", "–ú–∞–≥–∞–∑–∏–Ω—ã –∏–≥—Ä", "–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω—ã", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏", "–ö–Ω–∏–∂–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã", "–ö–Ω–∏–∂–Ω—ã–µ –∫–ª—É–±—ã", "–ê–Ω—Ç–∏–∫–≤–∞—Ä–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã", "–ö–æ–Ω—Ü–µ—Ä—Ç–Ω—ã–µ –∑–∞–ª—ã", "–ú–∞–≥–∞–∑–∏–Ω—ã –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", "–ú—É–∑–µ–∏ –º—É–∑—ã–∫–∏", "–ö–ª—É–±—ã", "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∫–ª—É–±—ã", "–§–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä—ã", "–°—Ç–∞–¥–∏–æ–Ω—ã", "–ú–∞–≥–∞–∑–∏–Ω—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –º—É–∑–µ–∏", "–ú—É–∑–µ–∏ –∏—Å–∫—É—Å—Å—Ç–≤–∞", "–ú—É–∑–µ–∏ –Ω–∞—É–∫–∏", "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º—É–∑–µ–∏"]

def load_users():
    try:
        with open(users_json, 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return []

def save_users(users):
    with open(users_json, 'w') as file:
        json.dump(users, file)

def add_user(user_id):
    users = load_users()
    if user_id not in users:
        users.append(user_id)
        save_users(users)

def notify_users(message):
    users = load_users()
    for user_id in users:
        try:
            bot.forward_message(chat_id=user_id, from_chat_id=message.chat.id, message_id=message.message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def load_data():
    try:
        with open(places_data_json, "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

def save_data(data):
    with open(places_data_json, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

def options_find(message):
    food_options = ["–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", "–ö–∞—Ñ–µ", "–§–∞—Å—Ç—Ñ—É–¥", "–°—Ç–æ–ª–æ–≤—ã–µ", "–ü–µ–∫–∞—Ä–Ω–∏", "–ú–∞–≥–∞–∑–∏–Ω—ã"]
    tech_options = ["–¢–µ—Ö–Ω–æ–ø–∞—Ä–∫–∏", "–°—Ç–∞—Ä—Ç–∞–ø—ã", "–ì–∞–¥–∂–µ—Ç—ã", "–ú–∞–≥–∞–∑–∏–Ω—ã —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏"]
    game_options = ["–ò–≥—Ä–æ–≤—ã–µ –∫–ª—É–±—ã", "–ú–∞–≥–∞–∑–∏–Ω—ã –∏–≥—Ä", "–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω—ã"]
    book_options = ["–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏", "–ö–Ω–∏–∂–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã", "–ö–Ω–∏–∂–Ω—ã–µ –∫–ª—É–±—ã", "–ê–Ω—Ç–∏–∫–≤–∞—Ä–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã"]
    music_options = ["–ö–æ–Ω—Ü–µ—Ä—Ç–Ω—ã–µ –∑–∞–ª—ã", "–ú–∞–≥–∞–∑–∏–Ω—ã –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", "–ú—É–∑–µ–∏ –º—É–∑—ã–∫–∏", "–ö–ª—É–±—ã"]
    sport_options = ["–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∫–ª—É–±—ã", "–§–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä—ã", "–°—Ç–∞–¥–∏–æ–Ω—ã", "–ú–∞–≥–∞–∑–∏–Ω—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"]
    museum_options = ["–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –º—É–∑–µ–∏", "–ú—É–∑–µ–∏ –∏—Å–∫—É—Å—Å—Ç–≤–∞", "–ú—É–∑–µ–∏ –Ω–∞—É–∫–∏", "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º—É–∑–µ–∏"]
    
    if message.text == 'üñ• –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏':
        return tech_options
    elif message.text == 'üéÆ –ò–≥—Ä—ã':
        return game_options
    elif message.text == 'üìö –ö–Ω–∏–≥–∏':
        return book_options
    elif message.text == 'üéµ –ú—É–∑—ã–∫–∞':
        return music_options
    elif message.text == 'üçï –ï–¥–∞':
        return food_options
    elif message.text == 'üèÉ –°–ø–æ—Ä—Ç':
        return sport_options
    elif message.text == 'üèõ –ú—É–∑–µ–∏':
        return museum_options

def categories_find(message):
    if message.text in ["–¢–µ—Ö–Ω–æ–ø–∞—Ä–∫–∏", "–°—Ç–∞—Ä—Ç–∞–ø—ã", "–ì–∞–¥–∂–µ—Ç—ã", "–ú–∞–≥–∞–∑–∏–Ω—ã —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏"]:
        return 'üñ• –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'
    elif message.text in ["–ò–≥—Ä–æ–≤—ã–µ –∫–ª—É–±—ã", "–ú–∞–≥–∞–∑–∏–Ω—ã –∏–≥—Ä", "–ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å–æ–ª–∏",  "–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω—ã"]:
        return 'üéÆ –ò–≥—Ä—ã'
    elif message.text in ["–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏", "–ö–Ω–∏–∂–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã", "–ö–Ω–∏–∂–Ω—ã–µ –∫–ª—É–±—ã", "–ê–Ω—Ç–∏–∫–≤–∞—Ä–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã"]:
        return 'üìö –ö–Ω–∏–≥–∏'
    elif message.text in ["–ö–æ–Ω—Ü–µ—Ä—Ç–Ω—ã–µ –∑–∞–ª—ã", "–ú–∞–≥–∞–∑–∏–Ω—ã –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", "–ú—É–∑–µ–∏ –º—É–∑—ã–∫–∏", "–ö–ª—É–±—ã"]:
        return 'üéµ –ú—É–∑—ã–∫–∞'
    elif message.text in ["–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", "–ö–∞—Ñ–µ", "–§–∞—Å—Ç—Ñ—É–¥", "–°—Ç–æ–ª–æ–≤—ã–µ", "–ü–µ–∫–∞—Ä–Ω–∏", "–ú–∞–≥–∞–∑–∏–Ω—ã"]:
        return 'üçï –ï–¥–∞'
    elif message.text in ["–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∫–ª—É–±—ã", "–§–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä—ã", "–°—Ç–∞–¥–∏–æ–Ω—ã", "–ú–∞–≥–∞–∑–∏–Ω—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"]:
        return 'üèÉ –°–ø–æ—Ä—Ç'
    elif message.text in ["–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –º—É–∑–µ–∏", "–ú—É–∑–µ–∏ –∏—Å–∫—É—Å—Å—Ç–≤–∞", "–ú—É–∑–µ–∏ –Ω–∞—É–∫–∏", "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º—É–∑–µ–∏"]:
        return 'üèõ –ú—É–∑–µ–∏'

def get_location_by_coordinates(latitude: float, longitude: float) -> dict:
    try:
        geolocator = Nominatim(user_agent="location-finder")
        location = geolocator.reverse((latitude, longitude), language='ru')

        if location and location.raw:
            address = location.raw.get("address", {})
            street = address.get("road", "")
            house_number = address.get("house_number", "")
            city = address.get("city") or address.get("town") or address.get("village", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
            return {
                "street": street,
                "city": city,
                "house_number": house_number
            }
        else:
            return {"error": "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
    except GeopyError as e:
        return {"error": str(e)}

def find_places_in_2gis(query, lat, lon, radius=1000):
    url = "https://catalog.api.2gis.com/3.0/items"
    params = {
        "q": query,
        "point": f"{lon},{lat}",
        "radius": radius,
        "fields": "items.point,items.full_address",
        "key": API_2GIS_KEY,
    }
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        places = []
        for item in data.get("result", {}).get("items", []):
            place = {
                "name": item.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ"),
                "address": item.get("full_address", "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"),
                "lat": item.get("point", {}).get("lat"),
                "lon": item.get("point", {}).get("lon"),
            }
            places.append(place)
        return places
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å API 2–ì–ò–°: {e}")
        return []

def send_feedback(message):
    developer_id = 5270288334
    feedback_text = message.text
    if message.text == '–ù–∞–∑–∞–¥':
        start_message(message)
    else:
        try:
            bot.send_message(developer_id, f'–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}:\n{feedback_text}')
            bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.')
        except Exception as e:
            bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞: {e}')
    start_message(message)

def menu_g_message(message):
    data = load_data()
    data_users = load_users()
    user_id = str(message.from_user.id)

    if user_id not in data_users:
        add_user(user_id)
    
    if user_id in data:
        del data[user_id]
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    find_places_button = types.KeyboardButton('üîç –ù–∞–π—Ç–∏ –º–µ—Å—Ç–∞')
    settings_button = types.KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    help_button = types.KeyboardButton('üì® –ü–æ–º–æ—â—å')
    feedback_button = types.KeyboardButton('‚òéÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
    markup.add(find_places_button)
    markup.add(settings_button)
    markup.add(help_button, feedback_button)

    bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)

@bot.channel_post_handler(func=lambda message: True)
def channel_message_handler(message):
    if message.chat.username == channel_username.lstrip("@"):
        notify_users(message)
        
@bot.message_handler(commands=['start'])
def start_message(message):
    data_users = load_users()
    user_id = str(message.from_user.id)

    if user_id not in data_users:
        add_user(user_id)
        
    menu_message(message)

@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥')
def go_back(message):
    menu_message(message)

@bot.message_handler(func=lambda message: message.text == 'üìñ –ú–µ–Ω—é')
def menu_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    find_places_button = types.KeyboardButton('üîç –ù–∞–π—Ç–∏ –º–µ—Å—Ç–∞')
    settings_button = types.KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    help_button = types.KeyboardButton('üì® –ü–æ–º–æ—â—å')
    feedback_button = types.KeyboardButton('‚òéÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
    markup.add(find_places_button)
    markup.add(settings_button)
    markup.add(help_button, feedback_button)

    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n'
                                      '–≠—Ç–æ –≥–æ—Ä–æ–¥—Å–∫–æ–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º —Å –í–∞–º–∏.\n'
                                      '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
def settings_handler(message):
    bot.send_message(message.chat.id, '–ó–¥–µ—Å—å –±—É–¥—É—Ç –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n'
                                      '---')

@bot.message_handler(func=lambda message: message.text == '‚òéÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
def feedback_handler(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
    markup.add(back_button)

    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å—é–¥–∞!', reply_markup=markup)
    bot.register_next_step_handler(message, send_feedback)

@bot.message_handler(func=lambda message: message.text == 'üì® –ü–æ–º–æ—â—å')
def show_help(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
    markup.add(back_button)

    help_text = (
        "–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º:\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–π—Ç–∏ –º–µ—Å—Ç–∞', —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞.\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–∞—à—ë–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.\n"
        "3. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n"
        "\n–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!")
    bot.send_message(message.chat.id, help_text, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ['üîç –ù–∞–π—Ç–∏ –º–µ—Å—Ç–∞', '‚ú® –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑'])
def your_places_to_find(message):
    data = load_data()
    user_id = str(message.from_user.id)

    if user_id in data:
        del data[user_id]
    
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    interests = ["üñ• –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "üéÆ –ò–≥—Ä—ã", "üìö –ö–Ω–∏–≥–∏", "üéµ –ú—É–∑—ã–∫–∞", "üçï –ï–¥–∞", "üèÉ –°–ø–æ—Ä—Ç", "üèõ –ú—É–∑–µ–∏"]
    buttons = [types.KeyboardButton(interest) for interest in interests]
    markup.add(*buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∏–Ω—Ç–µ—Ä–µ—Å:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["üñ• –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "üéÆ –ò–≥—Ä—ã", "üìö –ö–Ω–∏–≥–∏", "üéµ –ú—É–∑—ã–∫–∞", "üçï –ï–¥–∞", "üèÉ –°–ø–æ—Ä—Ç", "üèõ –ú—É–∑–µ–∏"])
def handle_interest_for(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    
    options = options_find(message)

    buttons = [types.KeyboardButton(option) for option in options]
    markup.add(*buttons)

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in mcat)
def handle_categories(message):
    category = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    location_button = types.KeyboardButton('üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', request_location=True)
    markup.add(location_button)

    categories = categories_find(message)

    bot.send_message(message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å: {categories}/{category}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –º–æ–≥ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞.', reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: handle_search(msg, message.text))

@bot.message_handler(func=lambda message: message.text == 'üó∫Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏')
def pre_mini(message):
    data = load_data()
    user_id = str(message.from_user.id)
    
    if user_id not in data:
        data[user_id] = []
    
    try:
        markup = types.InlineKeyboardMarkup(row_width=2)
        buttons = []
        for i in range(len(data[user_id])):
            web_app_info = types.WebAppInfo(url=data[user_id][i])
            buttons.append(types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏', web_app=web_app_info))
        markup.add(*buttons)

        bot.send_message(message.chat.id, text='–ù–∏–∂–µ –∫ –∫–∞–∂–¥–æ–º—É –º–µ—Å—Ç—É, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–æ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞', reply_markup=markup, disable_web_page_preview=True)
        del data[user_id]
        save_data(data)
        menu_g_message(message)
    except Exception:
        bot.send_message(message.chat.id, text='–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏(')
        menu_g_message(message)

def handle_search(message, query):
    data = load_data()
    user_id = str(message.from_user.id)
    lat = None
    lon = None
    places = None

    if user_id not in data:
        data[user_id] = []
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    app_start_button = types.KeyboardButton('üó∫Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏')
    restart_button = types.KeyboardButton('‚ú® –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑')
    menu_button = types.KeyboardButton('üìñ –ú–µ–Ω—é')
    markup.add(app_start_button)
    markup.add(restart_button)
    markup.add(menu_button)
    
    radius = 1000

    if message.location is not None:
        lat = message.location.latitude
        lon = message.location.longitude

    bot.send_message(message.chat.id, f"–ò—â—É –º–µ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ: '{query}' –≤ —Ä–∞–¥–∏—É—Å–µ {radius} –º–µ—Ç—Ä–æ–≤...")
    try:
        places = find_places_in_2gis(query, lat, lon, radius)
    except Exception:
        bot.send_message(message.chat.id, f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –≤ —Ä–∞–¥–∏—É—Å–µ {radius} –º–µ—Ç—Ä–æ–≤.", reply_markup=markup)

    if not places:
        bot.send_message(message.chat.id, f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –≤ —Ä–∞–¥–∏—É—Å–µ {radius} –º–µ—Ç—Ä–æ–≤.", reply_markup=markup)
    else:
        response = f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ —Ä–∞–¥–∏—É—Å–µ {radius} –º–µ—Ç—Ä–æ–≤:\n"
        for i, place in enumerate(places, 1):
            address = get_location_by_coordinates(place["lat"], place["lon"])
            yandex_maps_url = f'https://yandex.ru/maps/?rtext={lat},{lon}~{place["lat"]},{place["lon"]}&rtt=auto'
            response += (
                f'{i}. {place["name"]}\n'
                f'–ê–¥—Ä–µ—Å: –≥. {address["city"]}, —É–ª. {address["street"]} {address["house_number"]}\n'
                f'–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {place["lat"]}, {place["lon"]}\n'
                f'–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö: {yandex_maps_url}\n'
                '‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî\n')
            data[user_id].append(yandex_maps_url)
            save_data(data)
        bot.send_message(message.chat.id, f'{response}\n'
                                          f'–î–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ...', reply_markup=markup, disable_web_page_preview=True)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.infinity_polling()
