import telebot
import requests
from decimal import Decimal
from telebot import types
from geopy.geocoders import Nominatim
from geopy.exc import GeopyError

API_2GIS_KEY = '0289f404-c7ac-4866-a2ca-2068601a43b3'
API_TELEGRAM_TOKEN = "8006512955:AAF73BS-1stSho8V-qWvoI-Mn7oQXC-9dAA"

bot = telebot.TeleBot(API_TELEGRAM_TOKEN)

def get_location_by_coordinates(latitude: float, longitude: float) -> dict:
    try:
        geolocator = Nominatim(user_agent="location-finder")
        location = geolocator.reverse((latitude, longitude), language='ru')

        if location and location.raw:
            address = location.raw.get("address", {})
            street = address.get("road", "–ù–µ –Ω–∞–π–¥–µ–Ω–∞")
            house_number = address.get("house_number", "–ù–µ –Ω–∞–π–¥–µ–Ω")
            city = address.get("city") or address.get("town") or address.get("village", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
            return {
                "street": street,
                "city": city,
                "house_number": house_number
            }
        else:
            return {"error": "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
    except GeopyError as e:
        return {"error": str(e)}

def find_places_in_2gis(query, lat, lon, radius=1000):
    url = "https://catalog.api.2gis.com/3.0/items"
    params = {
        "q": query,
        "point": f"{lon},{lat}",
        "radius": radius,
        "fields": "items.point,items.full_address",
        "key": API_2GIS_KEY,
    }
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        places = []
        for item in data.get("result", {}).get("items", []):
            place = {
                "name": item.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ"),
                "address": item.get("full_address", "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"),
                "lat": item.get("point", {}).get("lat"),
                "lon": item.get("point", {}).get("lon"),
            }
            places.append(place)
        return places
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å API 2–ì–ò–°: {e}")
        return []

@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    find_places = types.KeyboardButton('–ù–∞–π—Ç–∏ –º–µ—Å—Ç–∞')
    markup.add(find_places)
    
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n'
                                      '–≠—Ç–æ –≥–æ—Ä–æ–¥—Å–∫–æ–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º —Å –í–∞–º–∏.\n'
                                      '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ['–ù–∞–π—Ç–∏ –º–µ—Å—Ç–∞', '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑!'])
def your_places_to_find(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    interests = ["üñ• –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "üéÆ –ò–≥—Ä—ã", "üìö –ö–Ω–∏–≥–∏", "üéµ –ú—É–∑—ã–∫–∞", "üçï –ï–¥–∞", "üèÉ –°–ø–æ—Ä—Ç", "üèõ –ú—É–∑–µ–∏"]
    buttons = [types.KeyboardButton(interest) for interest in interests]
    markup.add(*buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∏–Ω—Ç–µ—Ä–µ—Å:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["üñ• –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "üéÆ –ò–≥—Ä—ã", "üìö –ö–Ω–∏–≥–∏", "üéµ –ú—É–∑—ã–∫–∞", "üçï –ï–¥–∞", "üèÉ –°–ø–æ—Ä—Ç", "üèõ –ú—É–∑–µ–∏"])
def handle_interest(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    location_button = types.KeyboardButton('üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', request_location=True)
    markup.add(location_button)

    bot.send_message(message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å: {message.text}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –º–æ–≥ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞.', reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: handle_search(msg, message.text))

def handle_search(message, query):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    restart_button = types.KeyboardButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑!')
    markup.add(restart_button)
    
    radius = 1000

    if message.location is not None:
        lat = message.location.latitude
        lon = message.location.longitude

    bot.send_message(message.chat.id, f"–ò—â—É –º–µ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ: '{query}' –≤ —Ä–∞–¥–∏—É—Å–µ {radius} –º–µ—Ç—Ä–æ–≤...")
    places = find_places_in_2gis(query, lat, lon, radius)

    if not places:
        bot.send_message(message.chat.id, f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –≤ —Ä–∞–¥–∏—É—Å–µ {radius} –º–µ—Ç—Ä–æ–≤.", reply_markup=markup)
    else:
        response = f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ —Ä–∞–¥–∏—É—Å–µ {radius} –º–µ—Ç—Ä–æ–≤:\n"
        for i, place in enumerate(places, 1):
            address = get_location_by_coordinates(place["lat"], place["lon"])
            response += (
                f'{i}. {place["name"]}\n'
                f'–ê–¥—Ä–µ—Å: –≥. {address["city"]}, —É–ª. {address["street"]} {address["house_number"]}\n'
                f'–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {place["lat"]}, {place["lon"]}\n'
                '‚Äî ‚Äî ‚Äî ‚Äî ‚Äî\n')
        bot.send_message(message.chat.id, response, reply_markup=markup)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.infinity_polling()
