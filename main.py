import telebot
import requests
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

# –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
YANDEX_API_KEY = 'ac3b9335-a8aa-4b72-8993-81253dfdc199'
TOKEN = '7345327846:AAF2HRPVwVnKF5hpHo3u4zmDwSlARQDPRLk'
bot = telebot.TeleBot(TOKEN)

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_interests = {}
user_location = {}
user_state = {}

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = '6118296596'

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
STATE_INTEREST = 'interest'
STATE_LOCATION = 'location'
STATE_MAIN = 'main'
STATE_FEEDBACK = 'feedback'

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –≥–æ—Ä–æ–¥—Å–∫–æ–π –±–æ—Ç. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.')
    user_state[message.chat.id] = STATE_MAIN
    send_main_menu(message)

def send_main_menu(message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(KeyboardButton("üó∫Ô∏è –ù–∞–π—Ç–∏ –º–µ—Å—Ç–∞"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å"), KeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
def send_help(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    help_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.\n\n"
        "–í–æ—Ç –∫–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n"
        "1. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üó∫Ô∏è –ù–∞–π—Ç–∏ –º–µ—Å—Ç–∞' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–∫–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞.\n"
        "2. –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∏–Ω—Ç–µ—Ä–µ—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ï–¥–∞', '–°–ø–æ—Ä—Ç', '–ú—É–∑–µ–∏').\n"
        "3. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞.\n\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥, –Ω–∞–∂–º–∏ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'.\n"
        "–î–ª—è –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å—é–¥–∞, –Ω–∞–∂–∞–≤ '‚ùì –ü–æ–º–æ—â—å'."
    )
    bot.send_message(message.chat.id, help_text)
    send_main_menu(message)

@bot.message_handler(func=lambda message: message.text == "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
def handle_feedback(message):
    """–ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_state[message.chat.id] = STATE_FEEDBACK
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ.")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == STATE_FEEDBACK)
def receive_feedback(message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    feedback = message.text

    bot.send_message(ADMIN_ID, f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}:\n{feedback}")
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.")
    send_main_menu(message)

@bot.message_handler(func=lambda message: message.text == "üó∫Ô∏è –ù–∞–π—Ç–∏ –º–µ—Å—Ç–∞")
def start_find_places(message):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç"""
    user_state[message.chat.id] = STATE_INTEREST
    send_interest_request(message)

def send_interest_request(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–æ–∫ —Å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    interests = ["üñ• –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "üéÆ –ò–≥—Ä—ã", "üìö –ö–Ω–∏–≥–∏", "üéµ –ú—É–∑—ã–∫–∞", "üçï –ï–¥–∞", "üèÉ –°–ø–æ—Ä—Ç", "üèõ –ú—É–∑–µ–∏"]
    buttons = [KeyboardButton(interest) for interest in interests]
    markup.add(*buttons, KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∏–Ω—Ç–µ—Ä–µ—Å:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["üñ• –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "üéÆ –ò–≥—Ä—ã", "üìö –ö–Ω–∏–≥–∏", "üéµ –ú—É–∑—ã–∫–∞", "üçï –ï–¥–∞", "üèÉ –°–ø–æ—Ä—Ç", "üèõ –ú—É–∑–µ–∏"])
def handle_interest(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∏ –∑–∞–ø—Ä–æ—Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    user_interests[message.chat.id] = message.text
    bot.reply_to(message, f"–¢—ã –≤—ã–±—Ä–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å: {message.text}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –º–æ–≥ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞.")
    user_state[message.chat.id] = STATE_LOCATION
    send_location_request(message)

@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def handle_back(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    state = user_state.get(message.chat.id, STATE_MAIN)

    if state == STATE_INTEREST:
        send_main_menu(message)
    elif state == STATE_LOCATION:
        send_interest_request(message)
    else:
        send_main_menu(message)

def send_location_request(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    markup = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    location_button = KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
    back_button = KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    markup.add(location_button, back_button)
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=markup)

@bot.message_handler(content_types=['location'])
def handle_location(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç"""
    if message.location:
        latitude, longitude = message.location.latitude, message.location.longitude
        user_location[message.chat.id] = (latitude, longitude)

        interest = user_interests.get(message.chat.id)
        if interest:
            places = search_nearby_places(YANDEX_API_KEY, latitude, longitude, interest)
            send_places(message.chat.id, places)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∏–Ω—Ç–µ—Ä–µ—Å —Å–Ω–∞—á–∞–ª–∞.")
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

def send_places(chat_id, places):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if places:
        for place in places:
            bot.send_message(chat_id, place)
    else:
        bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º.")

def get_nearby_places(query, latitude, longitude, radius=20.0):
    """–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç API"""
    url = "https://search-maps.yandex.ru/v1/"
    params = {
        "apikey": YANDEX_API_KEY,
        "text": query,
        "ll": f"{longitude},{latitude}",
        "spn": f"{radius},{radius}",
        "type": "biz",
        "lang": "ru_RU",
        "results": 5
    }

    response = requests.get(url, params=params)

    if response.status_code == 200:
        data = response.json()
        if 'features' in data:
            places = []
            for feature in data["features"]:
                place = feature["properties"]
                name = place["name"]
                address = place.get("description", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                coordinates = feature["geometry"]["coordinates"]
                places.append(f"–ú–µ—Å—Ç–æ: {name}\n–ê–¥—Ä–µ—Å: {address}\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coordinates}")
            return places
        else:
            return []
    else:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}, {response.text}")
        return []

def search_nearby_places(api_key, latitude, longitude, query):
    """–ü–æ–∏—Å–∫ –º–µ—Å—Ç –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return get_nearby_places(query, latitude, longitude)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.infinity_polling()
